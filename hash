#include <iostream>
#include <string>
#include <vector>
#include <list>
int generateHash(std::string name);

//create hash data structure

class HashTable {
	int size;
public:
	HashTable(int c);
	void insertItem(std::string, int data);
	void deleteItem(std::string);
	void displayTable();
	
private:
	std::list<std::pair<std::string, int>>* items;
	//pointer to a list containing keys
	long long hashFunction(std::string);
};

HashTable::HashTable(int c) {
	this->size = c;
	items = new std::list<std::pair<std::string, int>>[size];
}

void HashTable::insertItem(std::string key, int data) {
	int index = hashFunction(key);
	items[index].push_back(std::pair<std::string, int>(key, data));
	std::cout << "Inserting " << key << " at index " << index << std::endl;
}

void HashTable::deleteItem(std::string key) {
	int index = hashFunction(key);
	auto it = items[index].begin();
	for (it = items[index].begin(); it != items[index].end(); it++) {
		if (it->first == key) {
			break;
		}
	}

	if (it != items[index].end()) {
		items[index].erase(it);
		std::cout << "Deleting " << key << " at index " << index << std::endl;
	}

}

long long HashTable::hashFunction(std::string name) {
	//implement polynomial rolling function
	//TODO - math overflow
	//FIX - decreased size of m
	int p = 31;
	long long m = 1572869; //1e9 + 9;
	long long hash = 0;
	long long power = 1;
	for (char c : name) {
		hash = (hash + (c - 'a' + 1) * power) % m;
		power = (power * p) % m;
	}
	return hash;
	/*
	long hash = 0;
	for (char c : name) {
		hash += c;
	}
	return hash;*/
}

void HashTable::displayTable() {
	for (int i = 0; i < size; i++)
	{
		if (items[i].size() != 0) {
			std::cout << "items[" << i << "]";
			for (auto x : items[i])
				std::cout << " --> " << x.first << " " << x.second;
			std::cout << std::endl;
		}
		
	}
}

void hashData() {
	//import data from main 
	std::vector<std::string> data; //placeholder
	//call insert function of HashTable object for each data pair
	//TODO: create HashTable object in main
	for (std::string n : data) {
		//TODO: insert pair item for each line of data
	}

}

/*int generateHash(std::string name) {
	//testing function
	int p = 5;
	long m = 1e9 + 9;
	long hash = 0;
	long power = 1;
	for (char c : name) {
		hash = (hash + (c - 'a' + 1) * power) % m;
		power = (power * p) % m;
	}
	return hash;
}*/

using namespace std;
int main()
{
	//generate data
	//create HashTable object to import data and perform operations

	//testing
	HashTable myTable = HashTable(1000000);
	myTable.insertItem("blue", 35); 
	myTable.insertItem("dogs", 18);
	myTable.insertItem("apple", 20);
	myTable.displayTable();
	myTable.deleteItem("apple");
	myTable.displayTable();
	
	//testing chaining
	myTable.insertItem("hello", 300);
	myTable.insertItem("hello", 900);
	myTable.displayTable();

}
