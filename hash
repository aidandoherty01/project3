#include <iostream>
#include <string>
#include <vector>
#include <list>


int main()
{
    //generate data
	//TODO: create HashTable object to import data and perform operations



}

//create hash data structure

class HashTable {
	int size;
public:
	void insertItem(std::string, int data);
	void deleteItem(std::string);
	
private:
	std::list<int>* items;
	int hashFunction(std::string);
};

void HashTable::insertItem(std::string key, int data) {
	int index = hashFunction(key);
	items[index].push_back(data);
}

void HashTable::deleteItem(std::string key) {
	int index = hashFunction(key);
	auto it = items[index].begin();
	for (it = items[index].begin(); it != items[index].end(); it++) {
		//TODO: determine if this is correct
		if (*it == index) {
			break;
		}
	}

	if (it != items[index].end()) {
		items[index].erase(it);
	}

}

int HashTable::hashFunction(std::string name) {
	//implement polynomial rolling function
	int p = 5;
	long m = 1e9 + 9;
	long hash = 0;
	long power = 1;
	for (char c : name) {
		hash = (hash + (c - 'a' + 1) * power) % m;
		power = (power * p) % m;
	}
	return hash;
}

void hashData() {
	//import data from main (or wherever it's generated)
	std::vector<std::string> data; //placeholder
	//call insert function of HashTable object for each data pair
	//TODO: create HashTable object in main
	for (std::string n : data) {
		
	}

}


